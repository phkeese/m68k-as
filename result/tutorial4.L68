00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 01/10/2020 18:28:28

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title         : Tutorial 4 for EASy68k
00000000                             3  * Written by    : Chuck Kelly
00000000                             4  * Date Created  : Nov-10-2012
00000000                             5  * Feb-14-2013 by CK, Comment change
00000000                             6  * Description   : This program demonstrates how to pass
00000000                             7  * parameters and return values from a subroutine.
00000000                             8  *    Adder1 subroutine uses registers to pass the parameters.
00000000                             9  *    Adder2 subroutine uses the stack to pass the parameters.
00000000                            10  * This program is public domain.
00000000                            11  *-----------------------------------------------------------
00000000                            12  
00001000                            13  START   ORG $1000
00001000                            14  
00001000                            15      * Input 2 numbers and add them with Adder1 subroutine.
00001000                            16      * The parameters and return value are passed using registers
00001000  303C 000E                 17      move    #14,D0      task 14, display string
00001004  43F9 000010C4             18      lea     prompt,A1   address of string to display in A1
0000100A  4E4F                      19      trap    #15         trap #15 performs task
0000100C                            20  
0000100C  303C 0004                 21      move    #4,D0       task 4, input number into D1.L
00001010  4E4F                      22      trap    #15         perform task
00001012  2401                      23      move.l  D1,D2       D2 = num1
00001014                            24  
00001014  303C 000E                 25      move    #14,D0      task 14, display string
00001018  43F9 000010C4             26      lea     prompt,A1   address of string to display in A1
0000101E  4E4F                      27      trap    #15         trap #15 performs task
00001020                            28  
00001020  303C 0004                 29      move    #4,D0       task 4, input number into D1.L
00001024  4E4F                      30      trap    #15         perform task, D1 = num2
00001026                            31  
00001026  6100 006A                 32      bsr     Adder1      D1 = D1 + D2
0000102A                            33  
0000102A  303C 000E                 34      move    #14,D0      task 14, display string
0000102E  43F9 000010D3             35      lea     result,A1   address of string to display in A1
00001034  4E4F                      36      trap    #15         trap #15 performs task
00001036  303C 0003                 37      move    #3,D0       task 3, display number in D1.L
0000103A  4E4F                      38      trap    #15         trap #15 performs task
0000103C                            39  
0000103C  6100 0070                 40      bsr     newLine
00001040                            41  
00001040                            42      * Input 2 numbers and add them with Adder2 subroutine.
00001040                            43      * The parameters and return value are passed on the stack
00001040  303C 000E                 44      move    #14,D0      task 14, display string
00001044  43F9 000010C4             45      lea     prompt,A1   address of string to display in A1
0000104A  4E4F                      46      trap    #15         trap #15 performs task
0000104C                            47  
0000104C  303C 0004                 48      move    #4,D0       task 4, input number into D1.L
00001050  4E4F                      49      trap    #15         perform task
00001052  2F01                      50      move.l  D1,-(SP)    push num1
00001054                            51  
00001054  303C 000E                 52      move    #14,D0      task 14, display string
00001058  43F9 000010C4             53      lea     prompt,A1   address of string to display in A1
0000105E  4E4F                      54      trap    #15         trap #15 performs task
00001060                            55  
00001060  303C 0004                 56      move    #4,D0       task 4, input number into D1.L
00001064  4E4F                      57      trap    #15         perform task
00001066  2F01                      58      move.l  D1,-(SP)    push num2
00001068  2F3C 00000000             59      move.l  #0,-(SP)    make room for sum on the stack
0000106E                            60      
0000106E  6100 0026                 61      bsr     Adder2      sum = num1 + num2
00001072  221F                      62      move.l  (SP)+,D1    pull sum from stack, D1 = sum
00001074  4FEF 0008                 63      lea     (8,SP),SP   clean up the stack
00001078                            64  
00001078  303C 000E                 65      move    #14,D0      task 14, display string
0000107C  43F9 000010D3             66      lea     result,A1   address of string to display in A1
00001082  4E4F                      67      trap    #15         trap #15 performs task
00001084                            68  
00001084  303C 0003                 69      move    #3,D0       task 3, display number in D1.L
00001088  4E4F                      70      trap    #15         trap #15 performs task
0000108A                            71  
0000108A  6100 0022                 72      bsr     newLine
0000108E                            73  
0000108E  FFFF FFFF                 74      SIMHALT             stop program execution
00001092                            75  
00001092                            76  *------------------------------------
00001092                            77  * Add the number in register D1 to the number in register D2.
00001092                            78  * The sum is returned in register D1. 
00001092                            79  * D1 = D1 + D2
00001092                            80  Adder1
00001092  D282                      81      add.l   d2,d1
00001094  4E75                      82      rts                         return
00001096                            83  
00001096                            84  *------------------------------------
00001096                            85  * Add two numbers passed as parameters on the stack.
00001096                            86  * The sum is returned on the stack. 
00001096                            87  * The OFFSET directive is used to access the parameters by name.
00001096                            88  * 4 bytes for A0 saved by link, 4 bytes for return address
00000008=                           89          offset  4+4
00000008=                           90  sum     ds.l    1 
0000000C=                           91  num2    ds.l    1 
00000010=                           92  num1    ds.l    1 
00001096                            93          org     *           end the offset
00001096                            94  
00001096                            95  Adder2
00001096  4E50 0000                 96      link    A0,#0           create stack frame 
0000109A  2F00                      97      move.l  D0,-(SP)        save D0 
0000109C  2028 0010                 98      move.l  (num1,A0),D0    access num1 parameter
000010A0  D0A8 000C                 99      add.l   (num2,A0),D0    add num2 parameter
000010A4  2140 0008                100      move.l  D0,(sum,A0)     store result in sum parameter
000010A8  201F                     101      move.l  (SP)+,D0        restore D0
000010AA  4E58                     102      unlk    A0
000010AC  4E75                     103      rts                     return
000010AE                           104  
000010AE                           105  *------------------------------------
000010AE                           106  * Subroutine to display Carriage Return and Line Feed
000010AE                           107  newLine 
000010AE  48E7 8040                108      movem.l d0/a1,-(SP)         push d0 & a1
000010B2  303C 000E                109      move    #14,d0              task number into D0
000010B6  43F9 000010E0            110      lea     crlf,a1             address of string
000010BC  4E4F                     111      trap    #15                 display return, linefeed
000010BE  4CDF 0201                112      movem.l (SP)+,d0/a1         restore d0 & a1
000010C2  4E75                     113      rts                         return
000010C4                           114  
000010C4                           115  *------------------------------------
000010C4                           116  * Variable storage and strings
000010C4                           117  * ds (define storage) is used to reserve memory for variables
000010C4                           118  * dc (define constant) is used to place data in memory
000010C4= 45 6E 74 65 72 20 ...    119  prompt  dc.b    'Enter number: ',0  null terminated string
000010D3= 54 68 65 20 73 75 ...    120  result  dc.b    'The sum is: ',0
000010E0= 0D 0A 00                 121  crlf    dc.b    $d,$a,0         carriage return & line feed, null
000010E3                           122  
000010E3                           123          END     START           end of program with start address specified

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDER1              1092
ADDER2              1096
CRLF                10E0
NEWLINE             10AE
NUM1                10
NUM2                C
PROMPT              10C4
RESULT              10D3
START               1000
SUM                 8
